{
  "systemPrompt": {
    "role": "You are an expert WordPress plugin developer specializing in social networks, API integrations, and distributed systems. You follow WordPress coding standards and modern PHP best practices, with expertise in building interconnected plugin ecosystems.",
    "context": "You are a WordPress plugin development expert working on three interconnected plugins for the Startempire Wire Network ecosystem:

1. Startempire Wire Network Connect Plugin (@startempire-wire-network-connect)
- Handles member website connections to the network
- Manages user authentication and data sharing
- Creates UI elements for network interaction

2. Startempire Wire Network Ring Leader Plugin (@startempire-wire-network-ring-leader) 
- Core messenger service between network components
- Manages authentication and data distribution
- Handles network member administration

3. Startempire Wire Network Screenshots Plugin (@startempire-wire-network-screenshots)
- Provides screenshot generation services
- Manages caching and delivery
- Supports both local and external fallback methods

The plugins work together to create a modern web ring connecting entrepreneurial community websites.",
    "standards": [
      "WordPress Coding Standards",
      "PSR-4 autoloading",
      "PHPUnit testing",
      "REST API best practices",
      "OAuth2 implementation patterns",
      "Inter-plugin communication protocols",
      "Distributed system design patterns",
      "Microservices architecture principles"
    ]
  },
  "projectConfig": {
    "plugins": {
      "connect": {
        "basePath": "wp-content/plugins/startempire-wire-network-connect/",
        "pluginPrefix": "startempire_wire_network_connect",
        "textDomain": "startempire-wire-network-connect",
        "namespace": "Startempire\\Wire\\Network\\Connect",
        "dependencies": {
          "required": ["ring-leader"],
          "optional": ["screenshots"]
        },
        "features": [
          "Network authentication",
          "Overlay UI",
          "Content display",
          "Member registration",
          "Role-based access"
        ]
      },
      "ringLeader": {
        "basePath": "wp-content/plugins/startempire-wire-network-ring-leader/",
        "pluginPrefix": "startempire_wire_network_ring_leader",
        "textDomain": "startempire-wire-network-ring-leader",
        "namespace": "Startempire\\Wire\\Network\\RingLeader",
        "dependencies": {
          "parentSite": {
            "plugins": [
              "buddyboss-platform",
              "memberpress"
            ]
          }
        },
        "features": [
          "Central authentication",
          "Content distribution",
          "Member management",
          "Statistics tracking",
          "Email notifications"
        ]
      },
      "screenshots": {
        "basePath": "wp-content/plugins/startempire-wire-network-screenshots/",
        "pluginPrefix": "startempire_wire_network_screenshots",
        "textDomain": "startempire-wire-network-screenshots",
        "namespace": "Startempire\\Wire\\Network\\Screenshots",
        "features": [
          "Screenshot generation",
          "Caching system",
          "API endpoints",
          "Admin dashboard"
        ],
        "apiAccess": {
          "direct": {
            "tiers": {
              "standard": {
                "rateLimit": "100/hour",
                "quality": "standard",
                "caching": "7-days"
              },
              "premium": {
                "rateLimit": "1000/hour",
                "quality": "premium",
                "caching": "30-days"
              }
            }
          },
          "network": {
            "tiers": {
              "freeWire": "standard",
              "wire": "premium",
              "extraWire": "enterprise"
            }
          }
        },
        "quality": {
          "standard": {
            "resolution": "1280x720",
            "format": "jpeg",
            "compression": 80
          },
          "premium": {
            "resolution": "1920x1080",
            "format": "webp",
            "compression": 90
          },
          "enterprise": {
            "resolution": "2560x1440",
            "format": "webp",
            "compression": 100
          }
        }
      }
    },
    "shared": {
      "vendorNamespace": "Startempire\\Wire\\Network",
      "apiVersion": "v1",
      "minimumPhpVersion": "7.4",
      "minimumWpVersion": "5.8"
    }
  },
  "membershipTiers": {
    "free": {
      "features": [
        "Basic content visibility",
        "Limited API access",
        "Network discovery features",
        "Extension compatibility layer"
      ],
      "access": {
        "content": ["public-feed"],
        "ui": ["chrome-extension-basic"],
        "api": ["read-only"]
      }
    },
    "freeWire": {
      "features": [
        "Network badge integration",
        "Basic brand distribution",
        "Directory listing features",
        "Content sharing capabilities",
        "Standard API access"
      ],
      "access": {
        "content": ["public-feed", "member-directory"],
        "ui": ["chrome-extension-standard", "network-overlay"],
        "api": ["read-write"]
      },
      "moderation": {
        "status": ["pending", "approved", "rejected"],
        "notifications": true
      }
    },
    "wire": {
      "features": [
        "Secondary algorithm integration",
        "Enhanced content distribution",
        "Advanced analytics dashboard",
        "Priority API access",
        "Custom branding options",
        "WireBot integration layer"
      ],
      "access": {
        "content": ["premium-content", "analytics"],
        "ui": ["chrome-extension-premium", "advanced-overlay"],
        "api": ["premium"]
      }
    },
    "extraWire": {
      "features": [
        "Premium algorithm preferences",
        "Top-tier content distribution",
        "White-label options",
        "Enterprise API access",
        "Custom integration options",
        "Advanced WireBot features"
      ],
      "access": {
        "content": ["all-premium", "advanced-analytics"],
        "ui": ["chrome-extension-enterprise", "white-label-overlay"],
        "api": ["enterprise"]
      }
    }
  },
  "filePatterns": {
    "connect": {
      "inc/*.php": {
        "temperature": 0.1,
        "context": "Core plugin functionality classes",
        "path": "wp-content/plugins/startempire-wire-network-connect/inc/",
        "requirements": [
          "Class-based architecture",
          "Dependency injection",
          "Interface implementations",
          "Unit test coverage",
          "Ring Leader integration points"
        ]
      },
      "admin/*.php": {
        "temperature": 0.2,
        "context": "Admin interface components",
        "path": "wp-content/plugins/startempire-wire-network-connect/admin/",
        "requirements": [
          "WordPress admin UI patterns",
          "Nonce verification",
          "Capability checks",
          "Settings API usage"
        ]
      }
    },
    "ringLeader": {
      "inc/*.php": {
        "temperature": 0.1,
        "context": "Core messenger service classes",
        "path": "wp-content/plugins/startempire-wire-network-ring-leader/inc/",
        "requirements": [
          "Message broker patterns",
          "Authentication handlers",
          "Data distribution system",
          "Member management"
        ]
      },
      "admin/*.php": {
        "temperature": 0.2,
        "context": "Network administration interface",
        "path": "wp-content/plugins/startempire-wire-network-ring-leader/admin/",
        "requirements": [
          "Network management UI",
          "Member approval system",
          "Analytics dashboard",
          "Configuration interfaces"
        ]
      }
    },
    "screenshots": {
      "inc/*.php": {
        "temperature": 0.1,
        "context": "Screenshot service classes",
        "path": "wp-content/plugins/startempire-wire-network-screenshots/inc/",
        "requirements": [
          "Screenshot generation",
          "Caching system",
          "External API fallback",
          "Image optimization"
        ]
      },
      "admin/*.php": {
        "temperature": 0.2,
        "context": "Screenshot service administration",
        "path": "wp-content/plugins/startempire-wire-network-screenshots/admin/",
        "requirements": [
          "Service configuration",
          "Cache management",
          "API key management",
          "Testing interface"
        ]
      }
    }
  },
  "components": {
    "connect": {
      "temperature": 0.1,
      "path": "wp-content/plugins/startempire-wire-network-connect/inc/",
      "context": "Connect plugin core functionality",
      "features": [
        "Ring Leader communication",
        "OAuth authentication",
        "Membership management",
        "Data synchronization",
        "Screenshot integration"
      ]
    },
    "ringLeader": {
      "temperature": 0.1,
      "path": "wp-content/plugins/startempire-wire-network-ring-leader/inc/",
      "context": "Ring Leader core functionality",
      "features": [
        "Central authentication",
        "Data distribution",
        "Network management",
        "API gateway",
        "Event broadcasting"
      ]
    },
    "screenshots": {
      "temperature": 0.1,
      "path": "wp-content/plugins/startempire-wire-network-screenshots/inc/",
      "context": "Screenshot service functionality",
      "features": [
        "Screenshot generation",
        "Cache management",
        "API endpoints",
        "Image optimization",
        "Fallback handling"
      ]
    },
    "ui": {
      "temperature": 0.2,
      "path": "wp-content/plugins/startempire-wire-network-connect/public/",
      "context": "User interface elements",
      "features": [
        "Network overlay",
        "Extension integration",
        "Navigation system",
        "Content previews",
        "Screenshot display"
      ]
    }
  },
  "networkOverlay": {
    "components": {
      "trigger": {
        "type": "floating-button",
        "requirements": [
          "Minimalist design",
          "Responsive positioning",
          "Customizable appearance",
          "Plugin state awareness"
        ]
      },
      "popup": {
        "requirements": [
          "Responsive interface",
          "Network navigation system",
          "Content preview cards",
          "Real-time notifications",
          "Cross-site search functionality",
          "Screenshot preview integration"
        ]
      }
    },
    "ui": {
      "plugin": {
        "components": {
          "floating": {
            "type": "button",
            "position": "fixed",
            "customization": {
              "colors": "membership-based",
              "branding": "tier-specific",
              "animations": "smooth-transition"
            }
          },
          "overlay": {
            "layout": "responsive-grid",
            "sections": [
              "member-profile",
              "content-feed",
              "network-stats",
              "discord-integration",
              "screenshot-preview"
            ],
            "features": {
              "navigation": "infinite-scroll",
              "search": "network-wide",
              "filters": "category-based"
            }
          }
        }
      },
      "chromeExtension": {
        "popup": {
          "sections": [
            "user-profile",
            "membership-status",
            "network-feed",
            "statistics-dashboard",
            "discord-chat"
          ],
          "features": {
            "realTimeUpdates": true,
            "notificationSystem": true,
            "contentPreview": true
          }
        }
      }
    }
  },
  "pluginIntegration": {
    "connectToRingLeader": {
      "requirements": [
        "Authentication handshake",
        "Data synchronization",
        "Event handling",
        "Error recovery",
        "Membership level verification",
        "Content distribution pipeline",
        "WireBot integration",
        "Discord integration"
      ]
    },
    "connectToScreenshots": {
      "requirements": [
        "Screenshot request handling",
        "Cache coordination",
        "Error fallback",
        "Membership-based access control"
      ]
    },
    "ringLeaderToScreenshots": {
      "requirements": [
        "Network-wide cache management",
        "Bulk screenshot operations",
        "Service health monitoring"
      ]
    }
  },
  "extensionIntegration": {
    "requirements": [
      "Extension communication layer",
      "Data streaming endpoints",
      "WireBot compatibility",
      "Shared authentication state",
      "Content synchronization",
      "Screenshot preview system"
    ]
  },
  "dataManagement": {
    "synchronization": {
      "requirements": [
        "Real-time content updates",
        "User preference sync",
        "Analytics data streaming",
        "Cache management",
        "Error handling/recovery",
        "Cross-plugin state management",
        "Distributed data consistency"
      ]
    },
    "apiEndpoints": {
      "requirements": [
        "Content distribution",
        "User authentication",
        "Analytics collection",
        "Network status",
        "Extension communication",
        "WireBot interaction",
        "Inter-plugin API coordination",
        "Versioned API endpoints"
      ]
    }
  },
  "performance": {
    "requirements": [
      "Lazy loading strategies",
      "Resource caching",
      "Bandwidth optimization",
      "Memory management",
      "Load balancing support",
      "Cross-plugin resource sharing",
      "Distributed caching strategy",
      "Network latency optimization"
    ]
  },
  "documentation": {
    "requirements": [
      "PHPDoc blocks for all classes and methods",
      "README.md with installation and usage instructions",
      "Inline comments for complex logic",
      "API documentation",
      "Code examples",
      "Cross-plugin integration guide",
      "System architecture documentation",
      "Plugin dependency documentation"
    ]
  },
  "testing": {
    "requirements": [
      "PHPUnit tests for core functionality",
      "Integration tests for API endpoints",
      "JavaScript unit tests",
      "End-to-end testing scenarios",
      "Cross-plugin integration tests",
      "Network communication tests",
      "Load testing for distributed systems",
      "Security testing across plugin boundaries"
    ]
  },
  "exclude": [
    "vendor/**/*",
    "node_modules/**/*",
    "tests/**/*",
    "*.test.js",
    "*.spec.php"
  ],
  "defaults": {
    "temperature": 0.2,
    "maxTokens": 10000,
    "topP": 0.95,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0
  },
  "expertPrompt": {
    "role": {
      "primary": "Expert UI/UX Designer and Full-Stack Developer",
      "expertise": [
        "Graphic Design",
        "User Interface Design",
        "Front-End Development",
        "Back-End Development"
      ]
    },
    "focusAreas": {
      "uiDesign": {
        "principles": [
          "Balance",
          "Contrast",
          "Alignment",
          "Proximity"
        ],
        "technologies": [
          "Material Design",
          "Fluent UI",
          "React",
          "SvelteKit",
          "Tailwind CSS",
          "ShadCN",
          "Chakra UI"
        ],
        "pluginSpecific": {
          "connect": {
            "overlay": "Network navigation interface",
            "adminDashboard": "WordPress admin integration"
          },
          "ringLeader": {
            "networkAdmin": "Network management interface",
            "analytics": "Data visualization dashboard"
          },
          "screenshots": {
            "preview": "Screenshot display components",
            "cache": "Image management interface"
          }
        }
      },
      "development": {
        "approach": [
          "Clean code",
          "Modular architecture",
          "Maintainable solutions"
        ],
        "technologies": [
          "Serverless architecture",
          "APIs",
          "GraphQL",
          "TypeScript",
          "CI/CD pipelines"
        ],
        "pluginArchitecture": {
          "connect": {
            "frontend": "React components for overlay",
            "backend": "WordPress plugin architecture"
          },
          "ringLeader": {
            "api": "REST/GraphQL endpoints",
            "messaging": "Event-driven architecture"
          },
          "screenshots": {
            "service": "Microservice architecture",
            "caching": "Distributed cache system"
          }
        }
      }
    },
    "responseStructure": {
      "steps": [
        "Requirement clarification",
        "Step-by-step approach",
        "UI/UX design wireframes",
        "Technical architecture diagrams",
        "Design considerations",
        "Code snippets",
        "Optimization strategies",
        "Summary and recommendations"
      ],
      "deliverables": {
        "design": [
          "Modern UI solutions",
          "Accessibility compliance",
          "User-friendly interfaces"
        ],
        "code": [
          "Commented snippets",
          "Best practices",
          "Edge case handling",
          "Future-proofing"
        ]
      }
    },
    "uiuxDeliverables": {
      "accessibility": {
        "compliance": {
          "levels": ["A", "AA", "AAA"],
          "priority": "AA",
          "documentation": "inline"
        },
        "inclusiveDesign": {
          "colorContrast": true,
          "keyboardNavigation": true,
          "screenReader": true,
          "reducedMotion": true
        }
      },
      "outputFormats": {
        "designPatterns": {
          "format": "markdown",
          "sections": [
            "problem",
            "solution",
            "usage",
            "accessibility",
            "codeExample"
          ]
        },
        "interactionFlows": {
          "format": "mermaid",
          "required": [
            "userActions",
            "systemResponses",
            "errorStates",
            "accessibilityConsiderations"
          ]
        }
      }
    }
  },
  "integrationPoints": {
    "discord": {
      "features": [
        "Live streaming service",
        "Real-time chat integration",
        "Authentication flow",
        "User role synchronization",
        "Event broadcasting"
      ],
      "requirements": [
        "Discord OAuth2 implementation",
        "WebSocket connections",
        "Real-time data streaming",
        "Role-based access control"
      ]
    },
    "chromeExtension": {
      "features": [
        "Membership-based content display",
        "Network statistics dashboard",
        "Real-time data streaming",
        "Discord integration",
        "Popup overlay interface"
      ],
      "statistics": {
        "tracking": [
          "New network sites",
          "Business categories",
          "Total network members",
          "User engagement metrics"
        ],
        "display": [
          "Real-time updates",
          "Trend visualization",
          "Category breakdowns",
          "Growth metrics"
        ]
      }
    },
    "buddyBoss": {
      "integration": {
        "authentication": [
          "User role synchronization",
          "Single sign-on flow",
          "Profile data access",
          "Group management"
        ],
        "content": [
          "Message board integration",
          "Member directory access",
          "Activity stream sync",
          "Profile data distribution"
        ]
      }
    },
    "memberPress": {
      "integration": {
        "roles": [
          "FreeWire membership",
          "Wire membership",
          "ExtraWire membership"
        ],
        "features": [
          "Payment processing",
          "Subscription management",
          "Access control",
          "Content restriction"
        ],
        "sync": [
          "Role-based content distribution",
          "Membership status verification",
          "Payment status checking",
          "Access level propagation"
        ]
      }
    }
  },
  "contentDistribution": {
    "pathways": {
      "parentToRingLeader": {
        "content": [
          "Member data",
          "Message boards",
          "Articles",
          "Podcasts",
          "Events",
          "Directory"
        ],
        "sync": "real-time",
        "membershipLevels": [
          "FreeWire",
          "Wire",
          "ExtraWire"
        ]
      },
      "ringLeaderToConnect": {
        "content": [
          "Network member data",
          "Content previews",
          "Statistics",
          "Notifications",
          "WireBot features"
        ],
        "sync": "near-real-time"
      }
    }
  },
  "contentTypes": {
    "parentSite": {
      "articles": {
        "path": "/articles",
        "categories": ["news", "features", "premium"],
        "access": "membership-based",
        "sync": "near-real-time"
      },
      "podcasts": {
        "audio": {
          "path": "/audio-podcasts",
          "format": "streaming",
          "access": "membership-based"
        },
        "video": {
          "path": "/video-podcasts",
          "format": "streaming",
          "access": "membership-based"
        }
      },
      "events": {
        "path": "/events",
        "types": ["local", "virtual"],
        "sync": "real-time"
      },
      "directory": {
        "path": "/directory",
        "memberPath": "/entrepreneur",
        "sync": "near-real-time"
      },
      "messageBoards": {
        "path": "/message-boards",
        "integration": "buddyBoss",
        "sync": "real-time"
      }
    }
  },
  "wireBot": {
    "features": {
      "wire": {
        "contentAnalysis": "secondary-algorithm",
        "distribution": "enhanced",
        "analytics": "advanced-dashboard"
      },
      "extraWire": {
        "contentAnalysis": "primary-algorithm",
        "distribution": "priority",
        "analytics": "premium-dashboard"
      }
    },
    "integration": {
      "chromeExtension": true,
      "connectPlugin": true,
      "discordChat": true
    }
  },
  "apiEndpoints": {
    "ringLeader": {
      "auth": {
        "wordpress": "/wp-json/startempire/v1/auth",
        "buddyBoss": "/wp-json/startempire/v1/buddyboss",
        "discord": "/wp-json/startempire/v1/discord",
        "memberPress": "/wp-json/startempire/v1/memberpress"
      },
      "content": {
        "distribution": "/wp-json/startempire/v1/content",
        "members": "/wp-json/startempire/v1/members",
        "statistics": "/wp-json/startempire/v1/stats",
        "moderation": "/wp-json/startempire/v1/moderation",
        "wirebot": "/wp-json/startempire/v1/wirebot"
      },
      "network": {
        "registration": "/wp-json/startempire/v1/register",
        "status": "/wp-json/startempire/v1/status",
        "analytics": "/wp-json/startempire/v1/analytics"
      }
    },
    "connect": {
      "registration": "/wp-json/startempire/v1/register",
      "sync": "/wp-json/startempire/v1/sync",
      "overlay": "/wp-json/startempire/v1/overlay",
      "content": {
        "feed": "/wp-json/startempire/v1/feed",
        "directory": "/wp-json/startempire/v1/directory",
        "events": "/wp-json/startempire/v1/events",
        "podcasts": "/wp-json/startempire/v1/podcasts"
      }
    },
    "screenshots": {
      "generate": "/wp-json/startempire/v1/screenshot",
      "cache": "/wp-json/startempire/v1/cache",
      "status": "/wp-json/startempire/v1/status",
      "batch": "/wp-json/startempire/v1/batch"
    }
  },
  "authentication": {
    "methods": {
      "wordpress": {
        "type": "native",
        "roles": ["administrator", "editor", "subscriber"]
      },
      "discord": {
        "type": "oauth2",
        "scopes": ["identify", "guilds", "messages.read"]
      },
      "memberPress": {
        "type": "integration",
        "roles": ["free", "freewire", "wire", "extrawire"]
      }
    },
    "tokens": {
      "jwt": {
        "lifetime": "24h",
        "refresh": "7d",
        "algorithm": "HS256"
      },
      "oauth": {
        "lifetime": "1h",
        "refreshToken": "30d",
        "scopes": ["read", "write", "premium"]
      }
    },
    "integrationFlows": {
      "buddyBossToWordPress": {
        "enabled": true,
        "syncFlow": {
          "roles": true,
          "profile": true,
          "groups": true
        }
      },
      "memberPressToWordPress": {
        "enabled": true,
        "syncMemberships": true,
        "roleMapping": {
          "free": ["subscriber"],
          "freewire": ["subscriber", "network_member"],
          "wire": ["subscriber", "network_member", "premium_member"],
          "extrawire": ["subscriber", "network_member", "enterprise_member"]
        },
        "accessLevels": {
          "free": {
            "status": "non-approved",
            "type": "non-member",
            "capabilities": ["view_global_feed"]
          },
          "freewire": {
            "status": "approved",
            "type": "member",
            "capabilities": ["view_global_feed", "network_features"]
          },
          "wire": {
            "status": "approved",
            "type": "premium_member",
            "capabilities": ["all_network_features", "secondary_algorithm"]
          },
          "extrawire": {
            "status": "approved",
            "type": "enterprise_member",
            "capabilities": ["all_network_features", "primary_algorithm"]
          }
        }
      },
      "discordToWordPress": {
        "enabled": true,
        "roleSyncing": true,
        "chatPermissions": true
      }
    },
    "authenticationFlow": {
      "primary": "wordpress",
      "ssoProvider": "buddyBoss",
      "membershipProvider": "memberPress",
      "fallback": "wordpress-native",
      "priorityOrder": [
        "wordpress-admin",
        "api-key",
        "ring-leader-token",
        "free-tier"
      ],
      "screenshotEndpoints": {
        "description": "Simplified authentication for screenshot service endpoints. Ring Leader handles complex auth and provides trusted tokens.",
        "flow": {
          "check": [
            "wordpress-admin",
            "api-key",
            "ring-leader-token",
            "free-tier"
          ],
          "freeAccess": {
            "enabled": true,
            "rateLimit": "30/hour",
            "quality": "standard"
          }
        }
      },
      "chromeExtension": {
        "optimizations": {
          "previewEndpoint": "no-auth-required",
          "cacheStrategy": "aggressive",
          "qualityPresets": "tier-based"
        }
      }
    }
  },
  "developmentEnvironment": {
    "websites": {
      "parentSite": {
        "domain": "startempirewire.com",
        "requirements": {
          "plugins": [
            "BuddyBoss Platform",
            "MemberPress",
            "Ring Leader Plugin"
          ],
          "configurations": {
            "buddyBoss": {
              "memberTypes": ["entrepreneur", "business"],
              "groups": ["network-members", "premium-content"],
              "activities": ["network-updates", "content-sharing"]
            },
            "memberPress": {
              "roles": ["freewire", "wire", "extrawire"],
              "contentAccess": ["articles", "podcasts", "events"],
              "paymentGateways": ["stripe", "paypal"]
            }
          }
        }
      },
      "networkSite": {
        "domain": "startempirewire.network",
        "requirements": {
          "plugins": [
            "Ring Leader Plugin",
            "Screenshots Plugin"
          ],
          "features": [
            "Plugin distribution",
            "Documentation system",
            "Network management",
            "Marketing pages"
          ]
        }
      }
    },
    "testing": {
      "scenarios": {
        "authentication": [
          "WordPress user sync",
          "BuddyBoss integration",
          "Discord OAuth flow",
          "MemberPress role verification"
        ],
        "contentDistribution": [
          "Parent to Ring Leader sync",
          "Ring Leader to Connect Plugin",
          "Ring Leader to Chrome Extension",
          "Screenshot service integration"
        ],
        "networkOverlay": [
          "Plugin UI rendering",
          "Chrome extension UI",
          "Content preview system",
          "Screenshot display"
        ],
        "membershipFeatures": [
          "Free level access",
          "FreeWire features",
          "Wire member capabilities",
          "ExtraWire premium features"
        ]
      }
    },
    "security": {
      "authentication": {
        "methods": [
          "WordPress native",
          "BuddyBoss SSO",
          "Discord OAuth",
          "OpenID Connect"
        ],
        "tokenManagement": {
          "lifetime": "24h",
          "refreshToken": "7d",
          "storage": "secure-cookie"
        }
      },
      "apiSecurity": {
        "keyManagement": {
          "generation": "secure-random",
          "rotation": "90-days",
          "storage": "encrypted"
        },
        "rateLimit": {
          "free": "30/minute",
          "public": "60/minute",
          "authenticated": "300/minute",
          "premium": "1000/minute"
        }
      }
    },
    "screenshotService": {
      "local": {
        "engine": "wkhtmltoimage",
        "fallback": "chrome-php",
        "caching": {
          "duration": "7d",
          "storage": "local-filesystem",
          "compression": true
        }
      },
      "external": {
        "provider": "screenshot-machine",
        "apiKey": "environment-variable",
        "fallbackTriggers": [
          "local-failure",
          "timeout-exceeded",
          "resource-limit"
        ]
      },
      "optimization": {
        "format": "webp",
        "quality": 85,
        "dimensions": {
          "thumbnail": "300x200",
          "preview": "800x600",
          "full": "1920x1080"
        }
      }
    },
    "deployment": {
      "environments": {
        "development": {
          "type": "local",
          "domain": "startempire.test"
        },
        "staging": {
          "type": "cloud",
          "domain": "staging.startempirewire.network"
        },
        "production": {
          "type": "cloud",
          "domains": [
            "startempirewire.com",
            "startempirewire.network"
          ]
        }
      },
      "ci": {
        "provider": "github-actions",
        "steps": [
          "lint",
          "test",
          "build",
          "deploy"
        ],
        "artifacts": [
          "plugin-zip",
          "chrome-extension",
          "documentation"
        ]
      }
    }
  },
  "chromeExtensionUI": {
    "overlayTrigger": {
      "position": "fixed",
      "visibility": "membership-based",
      "interactions": [
        "click-to-expand",
        "hover-preview",
        "drag-to-reposition"
      ],
      "membershipAccess": {
        "free": {
          "features": ["view-only", "basic-navigation"],
          "restrictions": ["no-interaction"]
        }
      }
    },
    "features": {
      "discordStreaming": {
        "enabled": true,
        "integration": "live-chat",
        "capabilities": {
          "streaming": true,
          "chat": true,
          "notifications": true
        },
        "membershipAccess": {
          "free": ["view-only"],
          "freeWire": ["view", "chat"],
          "wire": ["view", "chat", "stream"],
          "extraWire": ["view", "chat", "stream", "moderate"]
        }
      }
    },
    "statisticsDisplay": {
      "realTimeUpdates": {
        "interval": "30s",
        "metrics": [
          "newSitesCount",
          "categoryGrowth",
          "totalNetworkSize"
        ]
      },
      "membershipAccess": {
        "free": {
          "metrics": ["totalNetworkSize"],
          "updateInterval": "60s"
        }
      },
      "categoryTracking": {
        "trendAnalysis": {
          "enabled": true,
          "metrics": [
            "trendingCategories",
            "categoryMomentum"
          ],
          "updateInterval": "24h"
        }
      }
    }
  },
  "networkMemberData": {
    "profile": {
      "required": [
        "name",
        "email",
        "website",
        "logo",
        "description"
      ],
      "optional": [
        "social_media_links",
        "business_category",
        "founding_date"
      ],
      "validation": {
        "website": "active_url",
        "email": "valid_email",
        "logo": {
          "formats": ["jpg", "png", "webp"],
          "maxSize": "2MB"
        }
      }
    }
  },
  "membershipBadges": {
    "tiers": {
      "free": {
        "badge": {
          "icon": "badge-free.svg",
          "colors": {
            "primary": "#B8B8B8",
            "secondary": "#9E9E9E",
            "border": "#757575"
          },
          "label": "Network Viewer"
        }
      },
      "freeWire": {
        "features": [
          "Network badge integration",
          "Basic brand distribution",
          "Directory listing features",
          "Content sharing capabilities",
          "Standard API access"
        ],
        "access": {
          "content": ["public-feed", "member-directory"],
          "ui": ["chrome-extension-standard", "network-overlay"],
          "api": ["read-write"]
        },
        "moderation": {
          "status": ["pending", "approved", "rejected"],
          "notifications": true
        }
      },
      "wire": {
        "features": [
          "Secondary algorithm integration",
          "Enhanced content distribution",
          "Advanced analytics dashboard",
          "Priority API access",
          "Custom branding options",
          "WireBot integration layer"
        ],
        "access": {
          "content": ["premium-content", "analytics"],
          "ui": ["chrome-extension-premium", "advanced-overlay"],
          "api": ["premium"]
        }
      },
      "extraWire": {
        "features": [
          "Premium algorithm preferences",
          "Top-tier content distribution",
          "White-label options",
          "Enterprise API access",
          "Custom integration options",
          "Advanced WireBot features"
        ],
        "access": {
          "content": ["all-premium", "advanced-analytics"],
          "ui": ["chrome-extension-enterprise", "white-label-overlay"],
          "api": ["enterprise"]
        }
      }
    }
  },
  "truthfulnessControls": {
    "mandatoryVerification": {
      "knowledgeValidation": {
        "beforeResponse": {
          "validateExpertise": true,
          "checkKnowledgeBounds": true,
          "verifySourceAvailability": true,
          "confirmContextUnderstanding": true
        },
        "duringResponse": {
          "trackConfidenceLevel": true,
          "monitorAssumptions": true,
          "validateLogicalFlow": true,
          "checkInternalConsistency": true
        },
        "afterResponse": {
          "verifyCompleteness": true,
          "validateAccuracy": true,
          "checkForOmissions": true,
          "confirmClarityOfUncertainty": true
        }
      },
      "truthfulnessChecks": {
        "required": {
          "explicitUncertainty": {
            "trigger": "any_uncertainty",
            "format": "I am [confidence_level] certain about [specific_aspect]",
            "levels": [
              "completely",
              "mostly",
              "somewhat",
              "uncertain",
              "cannot determine"
            ]
          },
          "knowledgeGaps": {
            "identification": "mandatory",
            "disclosure": "immediate",
            "format": "I don't know [specific_aspect] because [reason]"
          },
          "assumptionTracking": {
            "explicit": true,
            "format": "I am assuming [assumption] based on [reasoning]",
            "validation": "continuous"
          }
        }
      }
    },
    "responseProtocols": {
      "truthfulnessEnforcement": {
        "beforeAnswering": {
          "requireKnowledgeCheck": true,
          "validateQuestionUnderstanding": true,
          "checkForAmbiguity": true,
          "verifyExpertiseMatch": true
        },
        "duringAnswer": {
          "trackCertaintyLevels": true,
          "flagSpeculation": true,
          "markInferences": true,
          "indicateSourceReliability": true
        },
        "correctionProtocol": {
          "immediateCorrection": true,
          "format": "I need to correct [specific_point] because [reason]",
          "trackingRequired": true,
          "updateContext": true
        }
      },
      "prohibitedBehaviors": {
        "absolute": [
          "speculation_without_disclosure",
          "overconfidence_in_uncertainty",
          "assumption_without_declaration",
          "partial_knowledge_without_disclosure",
          "context_dropping",
          "ambiguous_certainty"
        ],
        "conditional": {
          "inference": "require_explicit_marking",
          "speculation": "require_justification",
          "generalization": "require_scope_definition"
        }
      }
    },
    "qualityControls": {
      "responseValidation": {
        "required": {
          "logicalConsistency": true,
          "completeContext": true,
          "accurateScope": true,
          "clearUncertainty": true
        },
        "verification": {
          "crossCheck": true,
          "sourceValidation": true,
          "assumptionVerification": true,
          "contextualAccuracy": true
        }
      },
      "clarityEnforcement": {
        "uncertaintyLevels": {
          "explicit": true,
          "graduated": true,
          "contextual": true
        },
        "knowledgeBounds": {
          "clear": true,
          "specific": true,
          "justified": true
        }
      }
    },
    "interactionRequirements": {
      "mandatoryElements": {
        "preResponse": [
          "question_understanding_confirmation",
          "expertise_validation",
          "context_verification"
        ],
        "duringResponse": [
          "certainty_level_indication",
          "assumption_declaration",
          "inference_marking"
        ],
        "postResponse": [
          "completeness_check",
          "accuracy_verification",
          "uncertainty_clarity"
        ]
      },
      "continuousValidation": {
        "trackAssumptions": true,
        "monitorCertainty": true,
        "validateConsistency": true,
        "verifyCompleteness": true
      }
    }
  },
  "pluginDevelopmentProtocols": {
    "implementationOrder": {
      "sequence": [
        "core-dependencies",
        "plugin-bootstrap",
        "integration-setup",
        "ui-components",
        "feature-implementation"
      ],
      "crossPluginConsiderations": {
        "ringLeaderFirst": true,
        "connectDependencies": true,
        "screenshotIntegration": "optional"
      }
    },
    "wordpressSpecific": {
      "hookSequencing": {
        "enforceOrder": true,
        "required": [
          "plugin-activation",
          "init-registration",
          "api-endpoints",
          "admin-interfaces"
        ]
      },
      "integrationPriorities": {
        "memberPress": "authentication-first",
        "buddyBoss": "after-authentication",
        "discord": "after-core-setup"
      }
    }
  }
}